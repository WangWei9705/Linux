共享内存：最快的进程间通信方式（少了两步用户态与内核态之间的数据拷贝过程）
	原理：开辟一块物理内存空间，将这块内存映射到进程的虚拟地址空间进行操作，若多个进程映射连接同一块物理内存，则通过这块物理内存实现进程间通信。
	
	操作步骤；
	创建共享内存（shmget)->将共享内存映射到虚拟地址空间(shmat)——>直接通过虚拟地址进行内存操作(memcpy)——>解除映射关系(shmdt)——>删除共享内存(shmctl)
	共享内存生命周期随内核
	
进程间通信方式的命令操作：
	查看：ipcs           ipc -m ipc -s   ipcs -q
	删除：ipcrm -m shmid
	
	
	
消息队列（不常用)： 内核中维护的一个队列（默认先进先出）——>传输有类型的数据块
msgsnd  msgrcv  msgget   msgctl


信号量：内核中的一个(资源)计数器+等待队列（等待唤醒功能）
	资源计数：无资源（计数 <= 0)则等待					有资源(计数 > 0)则唤醒(等待队列上的进程)
	
	
	作用：主要用于实现进程间同步，也可以用于互斥
	
	
	获取资源之前通过计数判断是否有资源，无资源则等待，否则返回，获取资源进行处理，资源计数-1
	如果产生数据，则资源计数+1，唤醒等待队列中的进程
	
	gcc $^ -o $@
进程信号：
	概念： 通知一件事情的发生   软件中断，通知进程发生了某件事情，打断当前操作，去处理这个事件
		信号种类很多，每一个信号代表一个事件
		
	信号种类：kill -l 查看信号种类（62种，两大类（1~31号非可靠、非实时信号有可能丢失，34~64号是可靠、实时信号不会丢失））
	
	信号生命周期：
	
		信号产生：
			硬件产生：程序中断：ctrl+c/+|/+z（暂停）
			软件产生：kill命令 kill(pid,sig)  raise(sig)   abort()   alarm(sec)   sigqueue()
			core dumpad   核心转储   文件命名方式core.pid   
				ulimit -a 查看
				ulimit -c 设置core文件大小，单位kb
				gdb ./main -> core-file core.pid -> bt （查看函数调用栈)
				
		信号在进程中注册：
			在进程PCB的struct sigpeding ->signal（位图） 中标记收到了哪些信号；并且为这个信号组织一个sigqueue节点，添加到链表中。
			可靠信号：      修改位图为1，并且为每个到来的信号添加一个sigqueue节点           可能存在多个相同节点
			非可靠信号：	判断位图是否为1 ，为1则什么都不做（事件丢失），否则添加节点修改位图      只能有一个节点
		
		
		信号在进程中注销：
			在处理信号之前，在pcb中擦掉信号存在的痕迹，
			删除节点，位图置0
			可靠信号：	删除节点后判断是否还有相同节点，若有位图置1，否则置0
			非可靠信号：删除节点后，位图置0
		
		信号处理：信号的递达
			默认处理：	操作系统中既定义好的信号处理方式
			忽略处理：	nothing to do
			自定义处理：用户自己定义信号的处理方式
			 sighandler_t signal(int signum, sighandler_t handler);

			int sigaction(int signum（信号编号）, const struct sigaction *act（信号新处理动作）,struct sigaction *oldact（用于保存原有的处理动作）);
			
		自定义信号处理方式的捕捉流程：
			一个进程因为系统调用/中断/异常从用户态切换到内核态运行，完成功能后，准备返回用户态时，查看是否有信号待处理，有且是默认/忽略处理方式，则在内核直接完成，若是自定义处理方式，则返回用户态调用信号处理函数，完毕之后调用sigreturn返回内核态，当没有信号待处理，则调用sys_return返回用户态主控流程。

 		信号的阻塞：阻止信号被处理
			在pcb中有个信号阻塞集合，这个集合的作用就是用于标记哪些信号到来的时候暂时不去处理。
		
		int sigprocmask(int how（对信号阻塞集合要进行的动作）, const sigset_t *set, sigset_t *oldset);

       SIG_BLOCK       block = block | set   将set 中的信号添加到阻塞集合中

       SIG_UNBLOCK	   block = block & (-set) 对set 中的信号解除阻塞

       SIG_SETMASK     block = set 			将阻塞集合设置为set中的信号
		
		
       int sigemptyset(sigset_t *set);   清空set信号集合
	   
	   int sigfillset(sigset_t *set);	将所有信号添加到set集合中

       int sigaddset(sigset_t *set, int signum);	将signum信号添加到set集合

       int sigdelset(sigset_t *set, int signum);	将signum信号从set集合中溢出
	   
	   在所有信号中 SIGKILL -9   SIGSTOP -19  无法被阻塞/自定义/被忽略
	   
	竞态条件：程序的竞争执行
	不可/可重入函数：函数是否可以在多个执行流中重复进入（调用），
					而不会出现异常；有可能出现问题就是不可重入函数，否则为可重入函数
	
	
	可重入与不可重入的关键点：是否对全局数据进行了非原子操作。
	
	当用户自己设计函数或者调用他人函数时就要考虑函数是否可重入
	
	动态内存管理：