-------------------------------------------------------------------------------------------------------------------
								shell相关
								
shell：	命令行解释器 --用户与操作系统沟通的桥梁
		shell命令
			我们所执行的命令本质就是一个封装好的程序
		
		
linux 权限：
	用户分类 ：普通用户、超级用户（管理员）；
文件权限：
	文件权限对用户的分类 ：文件所有者、文件所属组、其他用户
	用户对文件操作的分类：可读、可写、可执行
	二进制、八进制表示：有权限1，无权限0
	umask    查看、设置文件默认权限掩码：设置文件默认的创建权限
	实际权限：给定权限&（-权限掩码）；
	例子：        给定 635   掩码 033  求权限
	实际权限=635 & （-033）
	设置文件权限：chmod 
	
	
linux常用工具：
	软件安装方式：源码安装、工具安装；
	yum 操作：
	查看可以安装的：yum list |grap package_name
	查看已安装: yum list installed |grap package_name
	安装软件: yum  install package_name         vim （编辑） gcc（编译） gdb（调试） git（版本控制） lrzsz（文件传输）
	删除已安装的: yum remove package_name
lrzsz使用：
	rz：从主机传输文件到服务器
	lz filename：从虚拟机/服务器传输文件到主机
	
VIM编辑器：
     
VIM共有12种模式：常用有三种，分别是普通模式（完成文件编辑的常见操作，如：光标移动、复制、粘贴、剪切、撤销、恢复撤销）、插入模式（插入数据）、底行模式（保存、退出编辑、设置。。。）
	
模式切换：  普通->插入      i        底行/插入->普通  Esc    普通->底行   Shift + ;
	插入模式：i  光标所在位置之前插入    I 行首插入    a 光标之后插入    A  行尾插入    o 向光标所在行下方添加一行   
	O  上方添加新行
	
普通模式下常用命令：
	光标移动：hjkl ←↑↓→    w/b :按单词左右移动  ctrl +r/b 向下向上翻页 gg/G文档首行/尾行
	复制：yy 复制光标所在行   nyy 从光标所在行开始向下复制n行
	粘贴：小写p 粘贴至光标下一行、大写P 粘贴至光标行一行
	剪切/删除：x 剪切光标所在字符  dw  删除光标所在单词    dd 删除光标所在行  ndd 从光标所在行向下删除n行
	撤销（撤销至上次保存为止）：u 撤销   
	恢复撤销：Ctrl+r 恢复撤销
底行模式下常用命令：
	：q  退出
	: w  保存
	：q! 强制退出

gcc编译器：
	gcc/g++:将高级语言（c/c++)编译成机器可识别的指令代码）
	编译过程：预处理（去掉注释展开所有代码）、编译（语义语法检错，并将所展开的代码解释为汇编代码）、汇编（将汇编代码解释为机器指令代码）、链接（链接代码库及所有目标文件，生成可执行文件）
	库文件：实现常用功能的接口，将实现接口的库函数编译汇编后存放的文件就叫库文件。 
	
	gcc链接方式分为：
	静态链接：链接时：将库中代码写入到可执行程序中。
	动态链接：链接时，只记录接口的位置符号信息，并不拷贝代码。(gcc默认链接方式）
	
	
	脚本语言不用编译就可执行，常用脚本语言 ：shell、Python
	
	
	
gdb调试器：
	调试程序的前提：生成debug版本程序，向程序中添加符号信息；
	linux下gcc默认生成的程序是release版本程序，需要添加 -g 选项生成debug程序
	
	gcc -g main.c -0 main
	加载程序：gdb ./main    gdb ->file ./main
	
	获取运行参数，并运行程序
	r  从头开始运行
	
	常见的调试操作：
		打印变量内容：
		单步调试：start 开始逐步调试  l(list)查看调试行附近代码    l filename:line                          n(next) 下一步 ,不进入函数内部，直接运行                  until直接运行到指定行     until filename:line   s(step)  下一步，跟踪进入函数内部
		打断点调试：b(break) fiename:line 打断点    break function_name	   给函数打断点       
					i(info) b(break)  查看断点信息   d(delete) id(断点编号） 删除指定断点
					c（continue） 断点停下后继续运行   watch  变量监控     watch var_name
					
		查看调用栈信息： bt   快速定位程序崩溃位置   
		
	
	
	
	
	
	
	
	
	
