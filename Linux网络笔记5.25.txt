网络编程：
	局域网/城域网/广域网
	IP地址：网络中用于唯一标识一台主机。
	端口  ：在一台主机上唯一标识一个进程。
	协议：通信双方的数据格式约定
	网络互联基础————网络通信协议的制定。
	协议分层：
		协议进行分层：按照服务、接口、协议对通信进行分层   分层之后网络通信环境更加清晰，通信实现起来更加方便。
					  形成标准之后才能实现网络互联。
	OSI七层参考模型（开放互联模型）：按照服务、接口、协议，多复杂的网络通信环境进行划分，形成标准实现网络互联
		从上到下：应用层——>表示层——>会话层——>传输层——>网络层——>链路层——>物理层
	
	TCP/IP五层模型：                     典型协议          典型设备
	应用层：负责应用程序之间的数据沟通。HTTP/FTP协议       程序员实现
	传输层：负责端与端之间的数据传输    TCP/UDP协议        操作系统（传输层到物理层）
	网络层：负责地址管理与路由选择      IP协议             路由器 
	链路层：负责相邻设备的数据传输      Ethernet           交换机（工作在链路层和物理层）
	物理层：负责光电信号的传输          以太网协议         集线器（信号增强、数据汇集功能）
	
	网络通信数据传输流程：
		发送数据：封装过程
		接收数据：分用过程
		
		
	套接字（socket)编程：
		IP地址：
		ipv4类型：uint32_t    
		ipv6类型：uint8_t addr[16]        由于不向前兼容ipv4，成本高，所以没有广泛使用 
		解决ipv4地址不够用的方法：
			1、DHPC动态地址分配技术
			2、NAT地址替换技术
			3、建立子网
		每条数据包含源ip地址与目的ip地址
		
		端口(port):在一台主机上标识一个进程（发往哪个端口的数据应该由哪个进程处理）
		类型：unit16_t    0~65535           0~1024不推荐使用
		一个端口只能被一个进程占用       一个进程可以使用多个端口
		每条数据都会包含源端口和目的端口
		每条数据：源IP，源端口，目的IP，目的端口，协议       五元组，标识网络中的一条通信
		
		(主机)字节序：CPU在内存中对数据进行存取的顺序。
				大端字节序：低地址存高位
				小端字节序：低地址存低位
		主机字节序取决于CPU架构      X86——小端     MIPS——大端
		数据存取时按字节处理，因此字节序针对的是大于一个字节存储的类型
		网络数据传输中，不同字节序的两个主机进行数据传输时会出现数据二义性，
		因此在网络通信中规定使用大端字节序作用通信的字节序标准
		
	传输层协议选择：	
		TCP协议：传输控制协议——面向连接，可靠传输，面向字节流       
		实现数据可靠传输，传输灵活，会造成数据粘包问题
		
		UDP协议：用户数据协议——无连接，不可靠，面向数据报           
		实现不可靠传输，传输不灵活，不会造成数据粘包问题
		
	    TCP为了实现可靠传输牺牲了部分性能，因此使用于安全性高的数据传输场景(如：文件传输，压缩包...)
		UDP不用实现可靠传输，因此传输速度快，适用于实时性要求高的传输场景(如：视频传输)
		
	UDP编程：
		API接口：
		
		1、创建套接字——通过套接字使进程与网卡之间建立联系            
		int socket(int domain, int type, int protocol);  doomain  地址域       AF_INNET使用ipv4网络协议地址域
		type    套接字类型     SOCK_STREAM  流式套接字——提供字节流服务       使用TCP协议     SOCK_DGRAM     数据报套接字——提供数据报传输服务    默认使用UDP协议
		protocol   传输层协议    0       根据套接字类型选择默认协议           IPPROTO_TCP   TCP协议   IPPROTO_UDP   UDP协议
		返回值：    成功   套接字描述符      失败   -1
		
		2、为套接字绑定地址信息
       int bind(int sockfd, const struct sockaddr *addr,socklen_t addrlen);
		sockfd    创建套接字时的返回值
		addr      地址信息
		addrlen    地址信息长度
		返回值：成功    0    失败   -1
		
		3、接收数据
		ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags,struct sockaddr *src_addr, socklen_t *addrlen);
		sockfd     套接字描述符
		buf        用于接收数据的缓冲区
		len         接收数据的长度
		flags     选项标志    0——阻塞接收数据
		src_addr  发送端地址信息
		addrlen    地址信息长度(输入输出型参数，指定想要的地址长度，返回实际地址长度)
		返回值：     成功  实际接受的地址长度    失败   -1
		
		4、发送数据
		 ssize_t sendto(int sockfd, const void *buf, size_t len, int flags,const struct sockaddr *dest_addr, socklen_t addrlen);
		sockfd     套接字描述符
		buf        要发送的数据
		len         发送数据的长度
		flags     选项标志    0——阻塞接收数据
		dest_addr  目的端地址信息
		addrlen    地址信息长度
		返回值：     成功  实际发送的数据长度    失败   -1
		
		5、关闭套接字
		int close(int fd);
		fd     套接字描述符
		返回值    成功   0   失败   -1
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	