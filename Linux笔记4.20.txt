进程控制：
	程序替换：替换一个正在进行的程序，让进程运行另一个程序。
	替换方式：
	minishell：1、获取标准输入，解析字符串得到命令+运行参数
			   2、判断命令是否内建
			   3、创建子进程，让子进程“背锅”（进行程序替换）
			   4、父进程，进行进程等待
			   
基础IO：
	标准IO接口:...
	系统调用IO接口：...
	文件描述符与文件流指针的关系：文件流指针中包含了一个成员变量就是文件描述符。
	库函数内部封装的就是系统调用接口。
	缓冲区是用户态的缓冲区，存在于文件流指针结构体中
	文件描述符：相当于一个数组下标，指向进程中的文件状态信息表中的文件状态信息
	文件描述符规则：最小未使用
	重定向：改变数据流向
	dup2(old,new);
	> 清空    >>  追加重定向
	
	
	文件系统：磁盘中的文件管理工具
	df 	查看磁盘分区使用情况
	ps  查看进程
	top  查看CPU使用情况
	fdisk -l  查看磁盘信息
	free  查看内存资源
	
	存储文件流程：00从data_bitmap中获取空间数据块，写入文件数据，从inode_bitmap中获取空间inode结点，写入文件详细信息以及数据块位置，将文件目录项写入所在的目录文件中
	
	
	目录文件中存放的是一张表：存放目录下的文件信息，（目录项：文件名和inode结点号
	
	读取文件流程：cat a.txt   通过文件名在目录项中获取到的inode节点号，进而在inode区域中获取到inode结点，进而获取到文件数据块位置，进而读取到文件数据。
	
	软链接/硬链接：inode结点号与源文件相同，软连接类似于快捷方式，硬链接相当于文件别名
	创建：ln  temp.txt temp.hard  硬链接    ln -s temp.txt tempt.soft 软连接    
	ls -l 中l 开头的为软链接文件/符号文件
	
	区别：
	软链接文件是一个单独文件，通过记录源文件路径进而访问源文件数据
	硬链接文件与源文件无区别，通过相同的iNode结点访问源文件数据
	
	删除源文件，硬链接文件，连接数-1,软链接文件失效
	软链接文件可以跨分区建立，硬链接文件不可以
	软链接文件可以对目录创建，硬链接不可以
	
	动态库（程序运行库）/静态库：
	库文件：打包了大量机器代码的文件，让别的程序使用

	生成：
	gcc -FPIC -c b.c -o b.o  将每一个C文件编译成目标代码
	gcc -share b.o -o libmytest.so 将所有目标代码链接起来生成动态库    
		-FPIC 产生未知无关代码
		
	gcc -c b.c -o b.o 		...
	ar -cr libmytest.a   将所有目标代码链接起来生成静态库    -c 创建   -r 模块替换 

	使用：
	
	静态库： 
	在Linux下库文件只有被放在指定路径下才能被找到 
	1、程序链接时链接库文件    
	2、程序运行时加载库文件
	3、将库文件直接放到指定路径下
	4、设置环境变量
	5、使用gcc 的-L 选项指定库的链接搜索路径
	gcc a.c main -L . -lmytest
	
	
	链接静态库不需要使用静态链接-static ，只需要保证指定路径下只有静态库就可以，链接器优先去指定路径下链接库

	动态库：
	
	
	
进程间通信（IPC)：

	基本介绍：由于进程之间无法直接沟通，需要操作系统提供一块公共的媒介实现通信，因为通信场景的不同，就产生了不同的通信方式
	
	通信目的：数据传输、资源共享、通知事件、进程控制
	
	通信方式：管道、共享内存、信号量、消息队列
	
	管道：传输数据资源----半双工通信（双向选择、单向通信）
		本质：内核中的一块缓冲区
		
		分类：
		匿名管道：仅能用于具有亲缘关系的进程间通信，通过复制父进程获取管道的操作句柄。(创建时必须创建于子进程之前）
		
		读写特性：
		管道中无数据，read会阻塞；管道中数据满了则write会阻塞。
		若管道所有write端被关闭，则read读完数据返回0，不会阻塞。
		
		若管道中所有read端关闭，则write写数据会出发异常，导致进程退出。
		
		由于管道的读写特性，用户在操作管道时不用的端口最好关掉。
		
		
		ls 将目录下文件信息打印到标准输出
		grep 循环从标准输入读取数据进行字符串匹配
		
		
		管道文件  p
		命名管道：管道有名字————名字的体现方式就是在文件系统中具有一个管道文件
		管道文件就是命名管道的名字-----给任意进程提供通过打开同一个命名管道进而访问到内核中同一块管道缓冲区的功能。
		
		int mkfifo(const char *pathname, mode_t mode);
		pathname  管道文件的路径名
		mode      管道文件的操作权限
		
		打开特性：
			
			若管道没有以写方式打开，则只读打开会阻塞
		    若管道没有以读方式打开，则只写打开会阻塞	

		命名管道读写特性与匿名管道雷同
		管道自带同步与互斥————保证操作原子性（读写大小<4096时操作无法被打断）

		同步：对临界资源访问的时序可控性（我操作完别人才能操作）
		互斥：临界资源（全局变量、管道）同一时间的唯一访问性（只允许单方操作）
		
	
	  管道提供字节流服务————传输方式灵活————造成数据粘连（本质原因：数据之间没有边界）
	  
	  管道生命周期随进程
	  
	  
	  
	
	
	匿名管道仅能用于具有亲缘关系的进程之间，命名管道可以用于任意进程。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	